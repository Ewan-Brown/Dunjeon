package com.ewan.dunjeon.data;

import com.ewan.dunjeon.world.Dunjeon;
import com.ewan.dunjeon.world.entities.creatures.Creature;
import lombok.AllArgsConstructor;
import lombok.Getter;
import org.dyn4j.geometry.Vector2;

import java.util.List;

public class Datastreams {

    public static class SightDataStream extends Datastream<SightDataStream.SightStreamParameters> {

        //Worry about performance LATER we can think about caching or something
        @Override
        public void update(Dunjeon d) {
            for (Sensor<SightStreamParameters> subscriber : getSubscribers()) {

                //Get necessary parameters from subscriber
                SightStreamParameters params = subscriber.getParameters();

                //Pretend that data calculation actually occurs here
                Datas.EntityKineticData kineticData = new Datas.EntityKineticData(d.getTime(), new Vector2(), 0, 0);
                Long entityId = 2L;

                //All data about a given entity grouped together
                List<Datas.EntityData> entityDataAmalgamated = List.of(kineticData);

                //Now give it context, with the entity ID and wrap it together nicely
                DataWrappers.EntityDataWrapper entityDataWrapper = new DataWrappers.EntityDataWrapper(entityDataAmalgamated, entityId);

                //Now pass all datawrappers generated by this sensor+datastream combo to this specific entity. There's only one element in this list so far...
                subscriber.passOnData(List.of(entityDataWrapper));

            }
        }

        @Override
        public Sensor<SightStreamParameters> constructSensorForDatastream(Creature c, Sensor.ParameterCalculator<SightStreamParameters> pCalc) {
            return new Sensor<>(c, this, pCalc);
        }

        @AllArgsConstructor
        @Getter
        public static class SightStreamParameters extends DataStreamParameters {
            final double sightRange;
            final double sightFieldOfView;
            /**
             * Where his eyeball at
             */
            final Vector2 sightSourceLocation;
        }
    }
}
