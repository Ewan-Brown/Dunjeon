----Complete----
Procedural World generation
    Generates a series of connected rectangular rooms, connected by hallways. After various iterations, pretty happy with this.
        Configurable : Max Room Count, min/max Room Size, World Size, hallway width
Dyn4J base implementation complete
    Underlying kinetics of entities are fully provided by this
    
Raytracing sight algorithm and skeleton for "memory" complete
    Has issues... see TODO
Simple pathing algorithms
Simple Entity hierarchy
Simple Entity AI - priority-ordered list of tasks
Flesh out memory system
Resolved Major dyn4j-related lag
Added basic simultaneous multiplayer

----TODO----
Clean up... everything
Add unit testing
Make use of a proper logging system
Make use of Docker
Investigate with VisualVM
Draft various AI flows
Fix the java.util.ConcurrentModificationException that appears. Might be appearing when many clients join sequentially
Fix the unending sight/raytracing algorithm issue.
    Not sure about whats up with this
Draft combat/collision and hook in Dyn4J collision detection
Allow connecting clients to select existing characters
Allow basic 'character creation' connecting clients
Re-investigate environmental interaction + reinvent UI functionality (previous highlighting system was terrible)









Theme :
    Location : Underground fortress - think DF adventure mode after retiring from a fort
    Objective : Openly interactive town with procedural events and characters
    Multiplayer might not per persistent - might be session based?

    There was the fun idea that all worlds are available publically online, each generated with seed as the name.
    Players will just function as characters passing by in the world

    Underground saves us from alot of nonsense, and lets it match DF a little more closely.
    Would be fun to do proper cave generation. Can easily work in a basic lore