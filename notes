====Big things===
----Complete----
Procedural World generation
    Generates a series of connected rectangular rooms, connected by hallways. After various iterations, pretty happy with this.
        Configurable : Max Room Count, min/max Room Size, World Size, hallway width
Dyn4J base implementation complete
    Underlying kinetics of entities are fully provided by this
    
Raytracing sight algorithm and skeleton for "memory" complete
    Has issues... see TODO
Simple pathing algorithms
Simple Entity hierarchy
Simple Entity AI - priority-ordered list of tasks

----TODO----
Dyn4J - hook in for collision detection
Flesh out memory system
Draft various AI flows
Simple 
Fix the unending sight/raytracing algorithm issue. 
    The non-visible sides of cells who have atleast one visible side occasionally highlight, but only when the problematic side is adjacent to another cell, and only for an immediate instant!
    Between the two highlighted cells, their colinear walls should NOT be visible, yet occasionally ONE of them is lighting up. Occurs consistently at certain angle+distance from the viewer.
    Thought it was a rounding issue when the ray clips extremely close to the corner of one of these, but should look more into what exact angles it occurs, see if theres a pattern.
    
    X X X X 
 -> X   @
 -> X
    X X X X
    
====WIP====
WOrking out performance issues
 - WIth just player spinning, ((on battery saving)) gets like 50-70ms frametime (not graphics included)
 - 99% of time spent on org.dyn4j.world.AbstractPhysicsWorld.solveTOI
 - There should be NO collisions at this point... so this is interesting...
 - Wonder about diff between battery life and
